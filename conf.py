# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/stable/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))


# -- Project information -----------------------------------------------------

project = 'KStars Handbook'
propername = 'The KStars Handbook'
description = 'The official KStars Documentation'
copyright = 'licensed under the GNU Free Documentation License 1.3+ unless stated otherwise'
author = 'KStars Team'

import functools
import os
import re
import subprocess
import sys
from collections import deque
from pathlib import Path
from typing import Optional


THIS_DIR = Path(__file__).resolve().parent


@functools.lru_cache(maxsize=None)
def get_override_language() -> Optional[str]:
    """Tries to detect the override language from `argv`, returns `None` if not available."""
    override_lang = None
    args = deque(sys.argv)
    args.popleft()
    while len(args) > 0:
        if args.popleft() != '-D':
            continue
        override_var = args.popleft()
        m = re.search('^language=([A-Za-z_]+)$', override_var)
        if not m:
            continue
        if override_lang:
            raise ValueError("`language` override found more than once, don't know how to handle this!")
        override_lang = m.group(1)
    return override_lang


def get_override_language_or_en() -> str:
    """Tries to detect the override language from `argv`, returns `"en"` if not available."""
    return get_override_language() or "en"


@functools.lru_cache(maxsize=None)
def get_is_building_epub() -> bool:
    """Tries to detect the output format from `argv`."""
    # override_lang = None
    target_builder = None
    args = deque(sys.argv)
    args.popleft()
    while len(args) > 0:
        # if args.popleft() != '-M':
        #     continue
        thisarg = args.popleft()
        if thisarg != '-M' and thisarg != '-b':
            continue
        if target_builder:
            raise ValueError("Target builder arg found more than once, don't know how to handle this!")
        target_builder = args.popleft()
    return target_builder == "epub"


# Get the git description if possible, to put it in the footer.

try:
    gitcommitfriendly = subprocess.check_output(["git", "describe", "--always"]).decode("utf-8").strip()
except subprocess.CalledProcessError as exc:
    gitcommitfriendly = None

# We use the full githash for the epub identifier, if not, use the release number.
try:
    gitcommithash = subprocess.check_output(['git', 'rev-parse', 'HEAD']).decode("utf-8").strip()
except subprocess.CalledProcessError as exc:
    gitcommithash = release

# The short X.Y version
version = '3.7'
# The full version, including alpha/beta/rc tags
release = '3.7.6'


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    #'sphinx.ext.autodoc',
    #'sphinx.ext.doctest',
    #'sphinx.ext.intersphinx',
    #'sphinx.ext.coverage',
    #'sphinx.ext.ifconfig',
    #'sphinx.ext.viewcode',
    #'sphinx.ext.githubpages',
    'sphinxcontrib.video',
    'sphinxcontrib.youtube',
]

if get_is_building_epub():
    templates_path = []
else:
    # Add any paths that contain templates here, relative to this directory.
    templates_path = [ 'theme' ]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = {
#     '.rst': 'restructuredtext',
#     '.md': 'markdown',
# }

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'en'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store', '.venv*', '.*']
html_extra_path = ['404handler.php'] # bring our 404 handler in

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# languages to exclude from smartquotes transformation. Requested by catalan translators due l':ref:`<crop_tool>` getting rendered as l"crop tool.
smartquotes_excludes = {'languages':[
                                    'ja',
                                    'ca',
                                    'fr',
                                    'zh_TW'
                                    ],
                        'builders': [
                                    'man',
                                    'text'
                                    ]
                        }


# A string of reStructuredText that will be included at the end of every source file that is read.
# This is a possible place to add substitutions that should be available in every file (another being rst_prolog).
rst_epilog = """"""

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'theme'
html_theme_path = ['.'] # make sphinx search for themes in current dir

# favicon
html_favicon = './images/kstars-favicon.ico' 
favicon_url = '/_static/kstars-favicon.ico'

html_logo = './images/kstars-logo.png'
logo_url = '/_static/kstars-logo.png'

# html canonical value:

html_baseurl = os.getenv('SITE_HOST', '') + get_override_language_or_en()
# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {
	'sticky_navigation': True,
	'collapse_navigation': True,
	'prev_next_buttons_location': 'bottom',
    'canonical_url': html_baseurl
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['theme/static', 'css']
html_css_files = ['full_width.css',]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}

# html_title = project + " version " + release

html_context = {
    'build_id': os.getenv('BUILD_NUMBER', None),
    'build_url': os.getenv('BUILD_URL', None),
    'commit' : gitcommitfriendly
}

html_last_updated_fmt = '%Y-%m-%dT%H:%M:%S'

# Search options. This varies depending on the language.
if get_override_language_or_en() == 'zh_CN':
    html_search_options = {
        'dict': str(THIS_DIR.joinpath('jieba-dict-zh_CN.txt')),
    }
elif get_override_language_or_en() == 'zh_TW':
    html_search_options = {
        'dict': str(THIS_DIR.joinpath('jieba-dict-zh_TW.txt')),
    }


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'documentationProjectNamedoc'


# -- Options for LaTeX output ------------------------------------------------

latex_engine = 'lualatex'
latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',
    'maxlistdepth': '8',
    'figure_align':'ht!',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    'preamble': r'''
\usepackage[export]{adjustbox}
\let\oincludegraphics\includegraphics
\renewcommand{\includegraphics}[2][]{
    \oincludegraphics[#1,max width=\linewidth,max height=\textheight]{#2}
}
    ''',
    'tableofcontents':r'\sphinxtableofcontents',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'KStarsHandbook.tex', project,
     author, 'manual'),
]
latex_show_pagerefs=True
# copy latex scripts to build dir
latex_additional_files = [
    "latexImageMakefile",
]

# -- Internationalization Options --------------------------------------------

locale_dirs = ['locale/']   # Where the PO files will be stored at
gettext_compact = False     # optional.
gettext_additional_targets = ['image', 'index', 'literal-block'] # allows images to be translatable
figure_language_filename = "{path}{language}/{basename}{ext}"



# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, project, propername,
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, project, propername,
     author, project, description,
     'Manual'),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
# filename
# epub_basename = project.replace(' ', '_') + '_' + language
epub_title = project+" "+version
epub_description = description

# Technically speaking dublincore accepts multiple author and contributor elements, but
# the sphinx builder only accepts one.
epub_author = author
epub_publisher = author
epub_copyright = copyright


epub_cover = ('_static/images/manual_cover.png', '')

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
# The above is false and perhaps a mistake in sphinx' documentation.
# epub_uid maps to id, which is the dc identifier id
# which in turn should be the used scheme.

if os.getenv('BUILD_ID', None) is None:
    # There is no uniform resource name for git, but just randomly pasting a githash is bad form.
    epub_identifier = 'git:'+gitcommithash
    epub_uid = 'githash'
    if gitcommithash == release:
        epub_uid = 'release'
        # there's also no urn for releases, as technically some database thing should be used for that.
        epub_identifier = '_'.join(['KStars_Handbook_Build', language, release])
else:
    epub_uid = 'url'
    epub_identifier = os.getenv('BUILD_URL', '')

# Not actually used anywhere? Docs say that this should be what the epub uid is used for but...
epub_scheme = 'URL'

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html', '.htaccess', '404.xhtml']

epub_tocscope = 'includehidden'

# -- Extension configuration -------------------------------------------------

# -- Options for intersphinx extension ---------------------------------------

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'python': ('https://docs.python.org/3', None)}

# -- Custom tags -------------------------------------------------------------

# For including content only in non-English builds.
# Use with:
#
#   .. only:: non_english
#
if get_override_language_or_en() != 'en':
    tags.add('non_english')
